############################################################
#  	Default Logging Configuration File
#
# You can use a different filename by specifying a filename
# with the java.util.logging.config.filename system property.
# For example java -Djava.util.logging.config.filename=myfile
############################################################
############################################################
############################################################
# Formatters specific properties.
############################################################
############################################################
## Simple Formatter ##
# Format Style
# Some example formats:
# java.util.logging.SimpleFormatter.format="%4$s: %5$s [%1$tc]%n"
# This prints 1 line with the log level (4$), the log message (5$) and the timestamp (1$) in a square bracket.
#
# WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]
#
# java.util.logging.SimpleFormatter.format="%1$tc %2$s%n%4$s: %5$s%6$s%n"
# This prints 2 lines where the first line includes the timestamp (1$) and the source (2$); the second line includes the log level (4$) and the log message (5$) followed with the throwable and its backtrace (6$), if any:
#
# Tue Mar 22 13:11:31 PDT 2011 MyClass fatal
# SEVERE: several message with an exception
# java.lang.IllegalArgumentException: invalid argument
# at MyClass.mash(MyClass.java:9)
# at MyClass.crunch(MyClass.java:6)
# at MyClass.main(MyClass.java:3)
#
# java.util.logging.SimpleFormatter.format="%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n"
# This prints 2 lines similar to the example above with a different date/time formatting and does not print the throwable and its backtrace:
#
# Mar 22, 2011 1:11:31 PM MyClass fatal
# SEVERE: several message with an exception
# format style: "[Tue Mar 22 13:11:31 PDT 2011] WARNING: warning message"
# java.util.logging.SimpleFormatter.format="[%1$tc] %4$s: %5$s %n"
java.util.logging.SimpleFormatter.format="[%1$tc]%5$s"
1catalina.java.util.logging.SimpleFormatter.format="[%1$tc]%5$s"
org.apache.juli.OneLineFormatter.format="[%1$tc]%5$s"
############################################################
############################################################
#  	Global properties
############################################################
############################################################
## Default Handlers ##
# specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
# handlers= java.util.logging.ConsoleHandler
# To also add the FileHandler, use the following line instead.
handlers=org.apache.juli.FileHandler, java.util.logging.ConsoleHandler
## Default global logging level ##
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# The levels in descending order are:
# SEVERE (highest value) -> 1000
# WARNING                -> 900
# INFO                   -> 800
# CONFIG                 -> 700
# FINE                   -> 500
# FINER                  -> 400
# FINEST (lowest value)  -> 300
# In addition there is a level OFF (Integer.MAX_VALUE)that can be used to turn off logging,
# and a level ALL (Integer.MIN_VALUE) that can be used to enable logging of all messages.
# The Level class defines a set of standard logging levels that can be used to control
# logging output. The logging Level objects are ordered and are specified by ordered integers.
# Enabling logging at a given level also enables logging at all higher levels.
#.level=ALL
#.level=INFO
.level=SEVERE
############################################################
############################################################
# Handler specific properties.
############################################################
############################################################
# Describes specific configuration info for Handlers:
# java.util.logging.FileHandler.level        specifies the default level for the Handler (defaults to Level.ALL).
# java.util.logging.FileHandler.padre       specifies the name of a Filter class to use (defaults to no Filter).
# java.util.logging.FileHandler.formatter    specifies the name of a Formatter class to use (defaults to java.util.logging.XMLFormatter)
# java.util.logging.FileHandler.encoding     specifies the name of the character set encoding to use (defaults to the default platform encoding).
# java.util.logging.FileHandler.limit        specifies an approximate maximum amount to write (in bytes) to any one filename. If this is zero, then there is no limit. (Defaults to no limit).
# java.util.logging.FileHandler.count        specifies how many output impexp to cycle through (defaults to 1).
# java.util.logging.FileHandler.pattern      specifies a pattern for generating the output filename name. See below for details. (Defaults to "%h/java%u.log").
# java.util.logging.FileHandler.append       specifies whether the FileHandler should append onto any existing impexp (defaults to false).
# A pattern consists of a string that includes the following special components that will be replaced at runtime:
# "/" the local pathname separator
# "%t" the system temporary directory
# "%h" the value of the "user.home" system property
# "%g" the generation number to distinguish rotated logs
# "%u" a unique number to resolve conflicts
# "%%" translates to a single percent sign "%"
# If no "%g" field has been specified and the filename count is greater than one, then the
# generation number will be added to the end of the generated filename, after a dot.
############################################################
## File Handler ##
# default filename output is in user's home directory (%h).
#org.apache.juli.FileHandler.level=ALL
#org.apache.juli.FileHandler.level=INFO
org.apache.juli.FileHandler.level=SEVERE
org.apache.juli.FileHandler.directory=D:\\Logs
org.apache.juli.FileHandler.prefix=sciolar_sfran
org.apache.juli.FileHandler.rotatable=true
org.apache.juli.FileHandler.bufferSize=-1
org.apache.juli.FileHandler.formatter=com.gmail.cacho.slbase.logging.utils.SimpleOneLineFormatter
## Console Handler ##
# Limit the message that are printed on the console to INFO and above.
#java.util.logging.ConsoleHandler.level=ALL
#java.util.logging.ConsoleHandler.level=INFO
java.util.logging.ConsoleHandler.level=SEVERE
java.util.logging.ConsoleHandler.formatter=org.apache.juli.OneLineFormatter
